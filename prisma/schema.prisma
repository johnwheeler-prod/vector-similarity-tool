// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // API Keys (encrypted)
  googleApiKey String?
  openaiApiKey String?

  // Usage tracking
  totalRequests     Int @default(0)
  monthlyRequests   Int @default(0)
  lastRequestAt     DateTime?
  monthlyResetAt    DateTime @default(now())

  // Rate limiting
  requestsThisMinute Int      @default(0)
  minuteResetAt      DateTime @default(now())

  accounts Account[]
  sessions Session[]
  apiUsage ApiUsage[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  provider  String   // 'google' | 'openai'
  model     String   // 'gemini-embedding-001' | 'text-embedding-3-small' etc
  tokens    Int      // number of tokens used
  cost      Float?   // estimated cost in USD
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([provider, createdAt])
}